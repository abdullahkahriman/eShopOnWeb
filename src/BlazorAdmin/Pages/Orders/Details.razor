@inject ILogger<Details> Logger
@inject IJSRuntime JSRuntime
@inject IOrderItemService OrderItemService

@inherits BlazorAdmin.Helpers.BlazorComponent

@namespace BlazorAdmin.Pages.OrderPage

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">Details</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body">

				@if (_items?.Count == 0)
				{
					<Spinner></Spinner>
				}
				else
				{
					<table class="table table-striped table-hover">
						<thead>
							<tr>
								<th>Name</th>
								<th>Unit</th>
								<th>Price</th>
							</tr>
						</thead>

						<tbody>
							@foreach (OrderItemDetail item in _items)
							{
								<tr>
									<td>
										@item.Name
									</td>
									<td>
										@item.Unit
									</td>
									<td>
										$ @item.Price
									</td>
								</tr>
							}
						</tbody>
					</table>
				}

			</div>
			<div class="modal-footer">
				@* <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button> *@
				@* <button class="btn btn-primary" @onclick="EditClick">
				Edit
				</button> *@
			</div>
		</div>
	</div>
</div>

@if (_showDetailsModal)
{
	<div class="modal-backdrop fade show"></div>
}

@code {
	// [Parameter]
	// public EventCallback<int> OnEditClick { get; set; }

	private string _modalDisplay = "none;";
	private string _modalClass = "";
	private bool _showDetailsModal = false;
	private List<OrderItemDetail> _items = new();

	// public async Task EditClick()
	//    {
	//        await OnEditClick.InvokeAsync(_item.Id);
	//        await Close();
	//    }

	public async Task Open(int id)
	{

		Logger.LogInformation("Now loading2... /Order/Details/{Id}", id);

		await new Css(JSRuntime).HideBodyOverflow();

		_items = await OrderItemService.GetById(id);

		Console.WriteLine("name: " + _items?.FirstOrDefault()?.Name);

		_modalDisplay = "block;";
		_modalClass = "Show";
		_showDetailsModal = true;

		StateHasChanged();
	}

	public async Task Close()
	{
		await new Css(JSRuntime).ShowBodyOverflow();

		_modalDisplay = "none";
		_modalClass = "";
		_showDetailsModal = false;
	}

}
